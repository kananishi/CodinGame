import java.util.*;
import java.io.*;
import java.math.*;
import static java.util.stream.Collectors.toList;
class Building {

	private boolean owner;	//0: Owned 1: Enemy
	private String type;	// 0:HQ
	private Position coordenates;
	
	private Building(Position coordenates, String type, boolean owner) {
		this.coordenates = coordenates;
		this.type = type;
		this.owner = owner;
	}
	
	public static Building create(Position coordenates, String type, boolean owner) {
		return new Building(coordenates, type, owner);
	}
	
	static class Builder{
		private boolean owner = false;	//true: Owned false: Enemy
		private String type = "";
		private Position coordenates = null;
		public Builder(){
		}
		public Builder owner(int value){
			this.owner = value == 1 ? true : false; 
			return this;
		}
		public Builder type(int value){
			this.type = value == 0 ? "HQ" : "";
			return this;
		}
		public Builder coordenates(Position value){
			this.coordenates = value;
			return this;
		}
		
		Building build() {
			return new Building(this.coordenates, this.type, this.owner);
		}
	}
	
	public boolean isOwn() {
		return owner;
	}

	public String getType() {
		return type;
	}

	public Position getCoordenates() {
		return coordenates;
	}
	
}


final class Game{

	private Game() {
	}
	
	protected static void run() {
		setParameters();
		exec(Strategy.Default.run());
	}

	final static Scanner input = new Scanner(System.in);

	private static int numberMineSpots;
	private static List<Position> mineSpots = new ArrayList<>(numberMineSpots);
	private static int gold;
	private static int income;
	private static int opponentGold;
	private static int opponentIncome;
	private static char[][] map = new char[Rules.MapWide.getValue()][Rules.MapHigh.getValue()];
	private static int buildingCount;
	private static List<Building> buildings = new ArrayList<>(buildingCount);
	private static int unitCount;
	private static List<Unit> allies = new ArrayList<>();
	private static List<Unit> enimies = new ArrayList<>();

	public static int getGold() {
		return gold;
	}
	
	public static int getIncome() {
		return income;
	}
	
	public static char[][] getMap(){
		return map;
	}
	
	public static List<Building> getBuildings() {
		return buildings;
	}
	
	public static List<Unit> getAllies() {
		return allies;
	}
	
	static void getMines() {
		numberMineSpots = input.nextInt();
		for (int i = 0; i < numberMineSpots; i++) {
			mineSpots.add(Position.create(input.nextInt(), input.nextInt()));
		}
	}

	static void setParameters() {
		gold = input.nextInt();
        income = input.nextInt();
        opponentGold = input.nextInt();
        opponentIncome = input.nextInt();
        
        for (int i = 0; i < Rules.MapWide.getValue(); i++) {
        	setMapOnLine(i, input.next());
        }
        
        buildingCount = input.nextInt();
        for (int i = 0; i < buildingCount; i++) {
        	Building.Builder building = new Building.Builder();
        	building.owner(input.nextInt());
        	building.type(input.nextInt());
        	building.coordenates(Position.create(input.nextInt(), input.nextInt()));
        }
        
        unitCount = input.nextInt();
        for (int i = 0; i < unitCount; i++) {
            int owner = input.nextInt();
            Unit unit = new Unit();
            unit.setId(input.nextInt());
            unit.setLevel(input.nextInt());
            unit.setCoordenates(Position.create(input.nextInt(), input.nextInt()));
            if(owner == Rules.AlliesUnits.getValue()) {
            	allies.add(unit);
            	return ;
            }
            enimies.add(unit);
        }
	}
	
	private static void setMapOnLine(int line, String lineInfo) {
		for(int i = 0; i < Rules.MapWide.getValue(); i++) {
			Game.log(lineInfo);
			map[line][i] = lineInfo.charAt(i);
		}
	}

	private static void exec(String commands) {
		System.out.println(commands);
	}

	public static void log( final Object message) {
		System.err.println(String.valueOf(message));
	}
}

class Player {

	public static void main(final String args[]) {
		Game.getMines();
		while (true) {
			Game.run();
		}
		
	}
}

public final class Position{
	private int x;
	private int y;

	public Position(final int x, final int y) {
		this.x = x;
		this.y = y;
	}

	public static Position create(final int x, final int y){
		return new Position(x, y);
	}

	public void setX(final int x) {
		this.x = x;
	}

	public int getX() {
		return x;
	}

	public void setY(final int y) {
		this.y = y;
	}

	public int getY() {
		return y;
	}

	@Override
	public String toString() {
		return "(x,y) = (" + x + "," + y + ")" ;
	}
}

enum Rules {
	MapWide(12),
	MapHigh(12),
	IncomeForCell(1),
	AlliesUnits(0),
	Unit1Cost(10),
	Unit1Income(1);
	

	private int value;

	private Rules(final int value) {
		this.value = value;
	}

	int getValue() {
		return value;
	}
}

enum Strategy {
	Default{
		@Override
		public String run() {
			String result = "WAIT;";
			return result;
		}
		
	};
	
	public abstract String run();

	private static String train(int level, Position coordenates) {
		return String.format("TRAIN %d %d %d;", level, coordenates.getX(), coordenates.getY());
	}
	
	private static String move(int id, Position destination) {
		return String.format("MOVE %d %d %d;", id, destination.getX(), destination.getY());
	}
	
	private static Position moveToOpenSpace(Position position) {
		char[][] map = Game.getMap();
		if(map[position.getX()+1][position.getY()] != '#') {
			return Position.create(position.getX(), position.getY() + 1);
		}
		if(map[position.getX()][position.getY()+1] != '#') {
			return Position.create(position.getX() + 1, position.getY());
		}
		return null;
	}
	
}


public class Unit {

	private int id;
	private int level;
	Position coordenates;

	public Unit(){
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getLevel() {
		return level;
	}

	public void setLevel(int level) {
		this.level = level;
	}

	public Position getCoordenates() {
		return coordenates;
	}

	public void setCoordenates(Position coordenates) {
		this.coordenates = coordenates;
	}
}
